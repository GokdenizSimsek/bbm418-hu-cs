# -*- coding: utf-8 -*-
"""assignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WIjP2ZVBbPexwrlV4hwIrzEKYAk_M9G0

**- INTRODUCTION -**

- In this assignment, we focus on detecting and counting cars in aerial images using the YOLOv8 object detection model. A subset of the Cars-dataset is used, and annotations are converted into YOLO format. We train a pretrained YOLOv8n model with various configurations, such as different layer freezing levels, optimizers, and learning rates. The model’s performance is evaluated using both detection metrics (Precision, Recall, mAP) and counting metrics like Exact Match Accuracy (EMA) and Mean Squared Error (MSE). Our goal is to analyze how training strategies affect counting accuracy in real-world drone imagery.

# necessary libraries and tools

The dataset was uploaded to colab and the necessary libraries were downloaded and included in the project.
"""

from google.colab import drive
drive.mount('/content/drive')

import shutil
shutil.copytree("/content/drive/MyDrive/cars_dataset", "/content/cars_dataset")

!pip install ultralytics

from ultralytics import YOLO
import os
from PIL import Image

"""# Setting the yolo data and implementing test functions

- Converting bounding box coordinates (x_min, y_min, x_max, y_max) into YOLO format and writes them to a label file.
"""

def convert_to_yolo(x_min, y_min, x_max, y_max, img_width, img_height):
    x_center = (x_min + x_max) / 2.0 / img_width
    y_center = (y_min + y_max) / 2.0 / img_height
    width = (x_max - x_min) / img_width
    height = (y_max - y_min) / img_height
    return x_center, y_center, width, height

def convert_annotation_file(input_path, output_path, image_path):
    with Image.open(image_path) as img:
        img_width, img_height = img.size

    with open(input_path, 'r') as infile, open(output_path, 'w') as outfile:
        for line in infile:
            parts = line.strip().split()
            if len(parts) != 5:
                continue
            x_min, y_min, x_max, y_max, class_id = map(int, parts)

            # Class ID'yi zorunlu olarak 0 yapıyoruz (car sınıfı)
            class_id = 0

            x_center = (x_min + x_max) / 2.0 / img_width
            y_center = (y_min + y_max) / 2.0 / img_height
            width = (x_max - x_min) / img_width
            height = (y_max - y_min) / img_height

            outfile.write(f"{class_id} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}\n")

"""- Preparing dataset split by copying images and converting corresponding annotation files into YOLO format for training, validation, or testing."""

def prepare_split(set_file, split_name, images_dir, annotations_dir,
                  output_images_dir, output_labels_dir):
    with open(set_file, 'r') as f:
        image_names = f.read().splitlines()

    os.makedirs(output_images_dir, exist_ok=True)
    os.makedirs(output_labels_dir, exist_ok=True)

    for name in image_names:
        img_path = os.path.join(images_dir, f"{name}.png")
        ann_path = os.path.join(annotations_dir, f"{name}.txt")
        out_lbl_path = os.path.join(output_labels_dir, f"{name}.txt")

        shutil.copy(img_path, os.path.join(output_images_dir, f"{name}.png"))
        convert_annotation_file(ann_path, out_lbl_path, img_path)

dataset_root = "/content/cars_dataset"
images_dir = os.path.join(dataset_root, "Images")
annotations_dir = os.path.join(dataset_root, "Annotations")

prepare_split(f"{dataset_root}/ImageSets/train.txt", "train",
              images_dir, annotations_dir,
              f"{dataset_root}/images/train", f"{dataset_root}/labels/train")

prepare_split(f"{dataset_root}/ImageSets/val.txt", "val",
              images_dir, annotations_dir,
              f"{dataset_root}/images/val", f"{dataset_root}/labels/val")

prepare_split(f"{dataset_root}/ImageSets/test.txt", "test",
              images_dir, annotations_dir,
              f"{dataset_root}/images/test", f"{dataset_root}/labels/test")

"""- Creating yaml file for yolo"""

with open("car_count_config.yaml", "w") as f:
    f.write(
        "path: /content/cars_dataset\n"
        "train: images/train\n"
        "val: images/val\n"
        "test: images/test\n"
        "names:\n"
        "  0: car\n"
    )

"""- This function evaluates a YOLO model on a test set by comparing the predicted number of objects in each image to the ground truth label count, returning lists of predicted and true counts."""

def evaluate_model_on_test(model, image_dir, label_dir):
    pred_counts = []
    true_counts = []
    image_names = [f for f in os.listdir(image_dir) if f.endswith(".png")]

    for img_name in image_names:
        img_path = os.path.join(image_dir, img_name)
        label_path = os.path.join(label_dir, img_name.replace(".png", ".txt"))

        # Tahmin
        results = model(img_path, verbose=False)
        pred_count = len(results[0].boxes)
        pred_counts.append(pred_count)

        # Gerçek etiket sayısı
        with open(label_path, 'r') as f:
            true_count = len(f.readlines())
        true_counts.append(true_count)
        print(f"Image: {img_name}, Predicted Count: {pred_count}, True Count: {true_count}")
    return pred_counts, true_counts

"""- for calculate exact match accuracy and mean squared error"""

def exact_match_accuracy(pred_counts, true_counts):
    matches = sum(p == t for p, t in zip(pred_counts, true_counts))
    return matches / len(true_counts) * 100

def mean_squared_error(pred_counts, true_counts):
    return sum((p - t) ** 2 for p, t in zip(pred_counts, true_counts)) / len(true_counts)

"""- for show Ground Truth Labels"""

def draw_yolo_labels(image_path, label_path):
    image = cv2.imread(image_path)
    height, width, _ = image.shape

    with open(label_path, 'r') as f:
        for line in f:
            parts = list(map(float, line.strip().split()))
            class_id, x_center, y_center, w, h = parts
            x1 = int((x_center - w/2) * width)
            y1 = int((y_center - h/2) * height)
            x2 = int((x_center + w/2) * width)
            y2 = int((y_center + h/2) * height)
            cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)  # green box

    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

"""# YOLO models training

- In this section, we train a pretrained YOLOv8n model on the converted dataset using different training configurations. The model is fine-tuned using the official Ultralytics training interface, with parameters such as learning rate, batch size, and frozen layers adjusted across experiments. The car_count_config.yaml file is used to specify the dataset structure, and the model is trained for 50 epochs with an input image size of 640×640 pixels. To observe the effect of transfer learning depth, we conduct multiple training sessions with different freeze values (e.g., 5, 10, 21, and full training). Training outputs, including loss plots and validation predictions, are saved under separate run directories for later evaluation and comparison.

## Yolo models with freeze 5 (the stem and the first two backbone blocks)

### 1- batchsize=32, lr=0.001, optimizer="SGD"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="SGD",
    name="yolov8n_freeze_5",
    freeze=5
)

"""- The model yolov8n_freeze_5 achieved a fitness score of 0.81, with a Precision of 98.90% and Recall of 97.17%. Its mAP50 is high at 99.20%, but the mAP50-95 drops to 78.73%. These values indicate that while the model performs well on easier detection thresholds (IoU 0.5), it struggles slightly on more strict localization metrics, which may suggest overfitting or insufficient generalization to challenging cases."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_5/results.png"))

"""- The loss and metric plots show steady convergence in all training and validation loss components (box, cls, dfl). The model exhibits high precision and recall by the end of training. However, the recall curve shows a slower increase and slight instability early on. The mAP curves also stabilize but plateau slightly below the optimal range seen in better-performing models, aligning with the drop in overall EMA and the higher MSE."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_5/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_5/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- Despite the strong metrics, the model underperforms in exact count estimation. The Exact Match Accuracy (EMA) is only 28.00%, and the Mean Squared Error (MSE) is quite high at 22.18, pointing to considerable overestimations in dense scenarios. This gap suggests that although the model is proficient in detecting cars, it frequently predicts extra instances—likely due to difficulties distinguishing overlapping vehicles or learning from limited fine-tuned layers. This limitation calls for reduced freezing or more specific counting-focused training to improve numerical accuracy."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_5/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00275.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 2- batchsize=32, lr=0.001, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_5_0",
    freeze=5
)

"""- The training using the Adam optimizer with the yolov8n model and five frozen layers yielded strong performance metrics. The model achieved 99.3% precision and 98.5% recall, reflecting excellent object detection accuracy. The mAP@0.5 reached 99.4%, while the more challenging mAP@0.5:0.95 was 81.9%, both indicating robust generalization. The final fitness score was 0.837, showing a notable improvement over previous configurations."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_0/results.png"))

"""- The training and validation curves display a consistent downward trend in box, classification, and DFL losses, demonstrating effective learning without overfitting. Evaluation metrics such as precision, recall, and both mAP variants steadily increased across epochs. This confirms that the model effectively leveraged transfer learning and achieved high performance throughout the training process."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_0/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_0/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_0/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_0/confusion_matrix.png"))

"""11785 223

121 -

#### test results
"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_0/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model was evaluated on the test set to assess its counting accuracy. It achieved an Exact Match Accuracy (EMA) of 38.5%, meaning the predicted vehicle count exactly matched the true count in 38.5% of the test images. Additionally, the model achieved a low Mean Squared Error (MSE) of 4.565, indicating that the predicted counts are, on average, very close to the true values, even when they are not exact. This suggests that the model demonstrates strong counting performance and is suitable for practical vehicle counting applications in aerial imagery."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_0/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00275.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 3- batchsize=64, lr=0.001, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_5_2",
    freeze=5
)

"""- The model trained with a batch size of 64 and the Adam optimizer achieved strong results: a precision of 0.99, recall of 0.98, and a high mAP@50 of 0.99. The overall fitness score reached 0.83, and the mAP@50-95, which reflects more stringent IoU thresholds, stood at 0.82. These metrics indicate that the model is highly effective in both detecting and localizing vehicles accurately."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_2/results.png"))

"""- The visualized training curves show consistent convergence in all loss components (box, classification, and distribution focal loss) for both training and validation sets. Additionally, the performance metrics, including precision, recall, and mAP scores, steadily improved over the epochs without signs of overfitting. This suggests a well-generalized model with stable learning dynamics throughout training."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_2/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_2/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_2/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_2/confusion_matrix.png"))

"""11758 217

148 -

#### test results
"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_2/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model achieved an Exact Match Accuracy (EMA) of 44.50%, meaning it predicted the exact number of cars correctly in nearly half of the test images. Additionally, the Mean Squared Error (MSE) was 4.91, indicating that the average squared difference between predicted and true counts remains low. These results reflect improved exact counting accuracy compared to previous runs, while still maintaining consistent performance in overall count estimation. This balance of high detection precision and count reliability suggests that the model generalizes well to unseen parking lot images."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_2/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00275.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 4- batchsize=64, lr=0.01, optimizer="Adam"

"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.01,
    optimizer="Adam",
    name="yolov8n_freeze_5_1",
    freeze=5
)

"""- The model trained with a learning rate of 0.01 and a batch size of 64 achieved a high fitness score of 0.85, indicating strong overall performance. The evaluation metrics reflect this success, with a precision of 0.99, recall of 0.98, mAP50 of 0.99, and mAP50-95 of 0.84, suggesting that the model is highly effective in detecting and localizing cars with high accuracy. These results demonstrate that the model has learned to generalize well to the validation set."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_1/results.png"))

"""- Looking at the training curves, the losses for both training and validation (box, classification, and distribution focal loss) generally show a decreasing trend, which confirms that the model is learning as expected. However, noticeable spikes in the validation losses and metric curves—particularly around epochs 20 and 40—suggest occasional instability, likely caused by the relatively high learning rate. Despite these fluctuations, the final values of the metrics recover well, and the model ultimately converges with robust performance, making it a suitable candidate for real-world car detection tasks."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_1/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_1/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_1/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_1/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_1/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model achieved an Exact Match Accuracy (EMA) of 45.00% and a Mean Squared Error (MSE) of 15.475 on the test set. While it correctly predicted the exact car count in nearly half of the images, the relatively high MSE indicates notable deviations in some cases. Overall, the model shows reasonable performance but can benefit from further optimization for more precise counting."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_1/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00275.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 5- batchsize=64, lr=0.005, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.005,
    optimizer="Adam",
    name="yolov8n_freeze_5_3",
    freeze=5
)

"""- This training achieved excellent performance metrics, with a precision of 0.99, recall of 0.98, mAP@50 of 0.99, and mAP@50-95 of 0.84. These results indicate the model's strong accuracy and generalization capabilities across different IoU thresholds. The overall fitness score of 0.85 reflects the model’s effectiveness in detection tasks."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_3/results.png"))

"""- The result plot demonstrates a smooth and steady decrease in both training and validation losses, with no signs of divergence or overfitting. Precision, recall, and mAP metrics improved consistently throughout the 50 epochs, confirming that the learning process was stable and effective. The visual evidence supports the numerical success of the training configuration."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_3/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_5_3/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_3/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_5_3/confusion_matrix.png"))

"""11772 166

134 -

#### test results
"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_3/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test set evaluation of this model demonstrates solid counting performance. The Exact Match Accuracy (EMA) reached 42.50%, meaning that in nearly half of the test images, the predicted car count matched the true count exactly. More importantly, the Mean Squared Error (MSE) is relatively low at 3.405, indicating that even when the predictions were not exact, the model’s estimates were consistently close to the ground truth. Overall, this result reflects good generalization and robustness in car counting across diverse scenes."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best model
model = YOLO("/content/runs/detect/yolov8n_freeze_5_3/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00275.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00275.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""## Yolo models with freeze 10 (entire backbone along with the SPPF bottleneck layer)

### 1- batchsize=32, lr=0.001, optimizer="SGD"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="SGD",
    name="yolov8n_freeze_10",
    freeze=10
)

"""- The training of the model using SGD optimizer and freezing the first 10 layers yielded a fitness score of 0.80, with strong precision (0.99) and recall (0.96). The model also achieved a high mAP@0.5 of 0.99, indicating very good bounding box localization performance, and a moderate mAP@0.5:0.95 of 0.78, suggesting slightly lower but still effective performance across stricter IoU thresholds."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_10/results.png"))

"""- As visualized in the training results, both training and validation losses decreased steadily without abrupt spikes, showing stable learning. The precision, recall, and mAP metrics continued improving over epochs, although they converged slightly lower than previous models using the Adam optimizer. Validation loss curves also suggest the model generalized reasonably well, though not as strongly as some earlier configurations."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_10/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_10/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10/confusion_matrix.png"))

"""11632 595

274 -

#### test results
"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- This model shows weak test performance with an Exact Match Accuracy (EMA) of only 21.5% and a high Mean Squared Error (MSE) of 28.34. While the detection quality remains relatively strong in terms of mAP, the model consistently overestimates the car count, indicating poor regression accuracy. The drop in performance may be due to the use of the SGD optimizer and freezing too many layers (freeze=10), which likely limited the model’s ability to adapt to the dataset."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00146.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 2- batchsize=32, lr=0.001, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_10_0",
    freeze=10
)

"""- This training run achieved a solid fitness score of 0.8248, with strong detection metrics: mAP50 at 0.9937, mAP50-95 at 0.806, and precision/recall above 0.98. The use of Adam optimizer and freezing the first 10 layers seems to have allowed the model to retain useful pretrained features while still adapting well to the dataset."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_0/results.png"))

"""- Looking at the training plots, both training and validation losses steadily decreased without signs of overfitting or instability. Precision and recall also improved consistently throughout epochs. The model appears well-generalized with strong validation metrics, suggesting that this configuration is more effective than the previous SGD-based variant."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_0/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_0/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_0/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_0/confusion_matrix.png"))

"""11743 204

163 -

#### test results
"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_0/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model shows a notable improvement over earlier SGD-based training, achieving a Mean Squared Error (MSE) of 5.33 and Exact Match Accuracy (EMA) of 35.5% on the test set. Most predicted counts are very close to true values, reflecting solid generalization. Although it slightly overestimates some dense scenes, overall the results suggest good object counting performance with relatively low error and consistent accuracy across diverse images."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_0/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00146.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 3- batchsize=64, lr=0.001, optimizer="Adam"
"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_10_1",
    freeze=10
)

"""- The training results demonstrate strong model performance, with a precision of 99.2%, recall of 97.9%, and a mAP@0.5 of 99.4%. The mAP@0.5:0.95 score of 80.4% indicates that the model performs well across varying IoU thresholds. The overall fitness score of 0.8234 confirms that this training run achieved solid balance across key detection metrics, suggesting effective feature learning and reliable detection behavior."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_1/results.png"))

"""- The result visualization confirms this outcome, showing steadily declining training and validation losses, especially in the box, classification, and DFL components. Metrics like precision, recall, and mAP exhibit consistent upward trends across epochs, with no abrupt drops or signs of overfitting. This stability suggests that the model not only fits the training data well but also generalizes effectively to validation samples."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_1/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_1/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_1/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_1/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_1/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results indicate solid overall performance, with an Exact Match Accuracy (EMA) of 35.00% and a relatively low Mean Squared Error (MSE) of 5.11, suggesting that most predicted counts are close to the true values. The model demonstrates good generalization with only minor over- or under-counting in several cases. This balance between accuracy and low error supports the reliability of the model for car counting tasks in real-world scenarios."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_1/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00146.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 4- batchsize=32, lr=0.01, optimizer="Adam"

"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.01,
    optimizer="Adam",
    name="yolov8n_freeze_10_2",
    freeze=10
)

"""- The training results show strong performance, with consistent decreases in all loss metrics (box, class, and DFL) for both training and validation sets, indicating stable convergence. The mAP50 and mAP50-95 metrics steadily improve throughout training, reaching approximately 0.99 and 0.83 respectively, which demonstrates high detection accuracy and localization precision."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_2/results.png"))

"""- From the result plot, the precision and recall curves indicate robust detection capability with minimal fluctuation, and the high fitness score of 0.848 reflects the model’s balanced optimization. These metrics suggest that freezing the first 10 layers while using Adam optimizer and a relatively high learning rate (0.01) helped the model generalize well to the validation data."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_2/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_2/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_2/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_2/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_2/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results indicate a noticeable improvement in model performance, with an Exact Match Accuracy (EMA) of 48.5%, the highest observed so far in experiments. The Mean Squared Error (MSE) also dropped to 5.05, reflecting more accurate count predictions. These metrics suggest that the model is not only identifying cars correctly but is also getting very close to the true counts in most images."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_2/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00146.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 5- batchsize=32, lr=0.005, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.005,
    optimizer="Adam",
    name="yolov8n_freeze_10_3",
    freeze=10
)

"""- Quantitatively, the model achieved a high mAP50 of 0.99 and mAP50-95 of 0.83, along with excellent precision (0.99) and recall (0.98). The overall fitness score of 0.85 reflects a strong balance between accuracy and generalization. These results suggest the chosen learning rate of 0.005 with the Adam optimizer was well-suited for this task."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_3/results.png"))

"""- The training metrics in the result graph show a consistent decrease in all types of loss (box, classification, and distribution focal loss) for both training and validation sets. Meanwhile, precision, recall, and mAP scores steadily improved and stabilized by the end of 50 epochs. This indicates the model learned effectively without signs of overfitting."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_3/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_10_3/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_3/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_10_3/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_3/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results indicate that the model achieved an Exact Match Accuracy (EMA) of 40.00% and a Mean Squared Error (MSE) of 6.4050. While the MSE is slightly higher than previous runs, the EMA shows moderate improvement compared to earlier lower scores, suggesting a better balance between prediction consistency and generalization. The model's predicted counts are generally close to the true values, with most differences within a small margin. However, occasional larger deviations, especially in dense images, contribute to the higher MSE. Further tuning or incorporating post-processing techniques may help enhance precision for exact matches."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_10_3/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)  # mavi kutu

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00146.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00146.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""## Yolo models with freeze 21 (All layers are frozen except the Detection head)

### 1- batchsize=32, lr=0.001, optimizer="SGD"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="SGD",
    name="yolov8n_freeze_21",
    freeze=21
)

"""- Performance metrics indicate decent detection capability, with a precision of 96.1%, recall of 92.6%, and mAP50 of 97.2%. However, the mAP50-95 is relatively lower at 70.6%, and the overall fitness is also moderate (0.73), suggesting that freezing 21 layers and using SGD may have limited the model’s capacity to fine-tune deeper features. A smaller freeze value or using Adam could potentially improve this."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_21/results.png"))

"""- The training graphs show steady declines in all loss metrics (box, classification, DFL) for both training and validation sets, which indicates stable learning. While there’s a visible jump around epoch 40 in box loss, the overall trend continues downward. Precision and recall also increase consistently, suggesting the model becomes more confident and consistent with its predictions over time."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_21/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_21/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results indicate poor model performance, with an Exact Match Accuracy (EMA) of just 1.50% and a very high Mean Squared Error (MSE) of 400.77, suggesting the model severely overestimates object counts. This likely stems from an overly restrictive training configuration, such as freezing too many layers (21) and using the SGD optimizer, which may have hindered effective learning and generalization."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_21/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00365.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 2- batchsize=32, lr=0.001, optimizer="Adam"
"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_21_0",
    freeze=21
)

"""- The training results indicate strong overall model performance, with high precision (0.97), recall (0.94), and mAP50 (0.98), alongside a solid mAP50-95 of 0.72. The fitness score of 0.749 also reflects a balanced combination of these metrics. Freezing 21 layers and using the Adam optimizer helped the model maintain stability while learning effectively, though there may still be room for improvement in fine-grained localization."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_0/results.png"))

"""- The result visualization supports these metrics, showing steadily decreasing training and validation losses across all components, which implies no signs of overfitting. Additionally, the precision, recall, and both mAP curves show consistent upward trends, confirming that the model is learning meaningful features and improving detection quality over the course of training."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_0/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_0/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_0/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_0/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_0/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results indicate that the model struggles with precise counting, as shown by the low Exact Match Accuracy (EMA) of 9.00% and a relatively high Mean Squared Error (MSE) of 121.41. While the model has learned general object detection reasonably well, it frequently overestimates car counts, especially in dense scenes, suggesting a need for further refinement or post-processing to improve count-level accuracy."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_0/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00365.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 3- batchsize=64, lr=0.001, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_freeze_21_1",
    freeze=21
)

"""- The training results for the model experiment indicate a solid performance with a fitness score of 0.75. The model achieved mAP50 of 0.98, mAP50-95 of 0.73, and strong precision (0.97) and recall (0.94), showing it effectively learned to detect and classify cars with high consistency."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_1/results.png"))

"""- From the result plots, we observe a consistent downward trend in all loss components, indicating stable learning. Both training and validation curves for box, class, and DFL losses decrease smoothly. The mAP metrics steadily improve and plateau, which suggests the model generalized well without signs of overfitting."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_1/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_1/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_1/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_1/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_1/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- This model shows extremely poor performance in the object counting task. With an Exact Match Accuracy (EMA) of only 6.50%, it was able to predict the correct number of cars in just a small fraction of the test images. Furthermore, the Mean Squared Error (MSE) of 120.9200 is alarmingly high, indicating that the predicted counts deviated significantly from the actual values. Such results suggest that the model failed to generalize and likely suffered from severe underfitting or inappropriate training configurations (e.g., excessive layer freezing or a flawed optimizer setup). This model clearly underperforms and should be excluded from consideration when identifying successful models."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_1/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00365.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 4- batchsize=32, lr=0.01, optimizer="Adam"

"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.01,
    optimizer="Adam",
    name="yolov8n_freeze_21_2",
    freeze=21
)

"""- The model trained with a learning rate of 0.01 achieved a solid performance, reaching a fitness score of 0.761. Key metrics include a precision of 0.972, recall of 0.945, mAP@50 of 0.985, and mAP@50-95 of 0.737, indicating robust detection performance, especially in identifying car objects. These results suggest that the model benefited from the higher learning rate, leading to effective convergence and strong detection quality."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_2/results.png"))

"""- The training curves show a consistent and smooth decrease in all loss components (box, class, and distribution focal loss), both on training and validation sets. The precision and recall metrics steadily increase, with minimal fluctuations. The mAP metrics also show a strong upward trend, with mAP@50-95 reaching a plateau around epoch 40, signaling stable learning and good generalization. Overall, the result graph indicates healthy training dynamics and well-tuned hyperparameters."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_2/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_2/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_2/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_2/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_2/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The test results show a noticeable improvement in model performance, with the Mean Squared Error (MSE) reduced to 74.77, the lowest observed so far, and the Exact Match Accuracy (EMA) reaching 9.00%, matching the best value from previous runs. This indicates that the model is not only predicting closer to the true car counts on average but is also more frequently getting the exact number correct. The consistent performance improvements suggest that the higher learning rate used in training helped the model converge more effectively for this specific task."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_2/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00365.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 5- batchsize=32, lr=0.005, optimizer="Adam"
"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.005,
    optimizer="Adam",
    name="yolov8n_freeze_21_3",
    freeze=21
)

"""- The training results indicate that the model trained with a learning rate of 0.005 achieved strong detection performance. The mAP@0.5 reached 0.99, while mAP@0.5:0.95 scored 0.74, alongside high precision (0.97) and recall (0.95). The overall fitness value of 0.7603 is nearly the best among previous runs, suggesting a well-generalized model capable of accurate object localization and classification for car counting."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_3/results.png"))

"""- The result visualizations show steadily decreasing training and validation losses across all loss components (box, cls, dfl), indicating consistent convergence. Precision, recall, and both mAP metrics exhibit smooth and sharp improvements early in training, stabilizing toward high values by epoch 50. This suggests the model not only learned effectively but also avoided overfitting, validating the effectiveness of the chosen training configuration."""

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_3/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_freeze_21_3/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_3/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_freeze_21_3/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_3/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""
- The results indicate that this model performed very poorly in the object counting task. With an Exact Match Accuracy (EMA) of only 9.50%, it correctly predicted the exact number of cars in less than one out of every ten images. Additionally, the Mean Squared Error (MSE) of 74.6950 is extremely high, suggesting large deviations between predicted and actual counts."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_freeze_21_3/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00365.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00365.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""## Yolo models with no freeze (No layers are frozen; the full network is trained)

### 1- batchsize=32, lr=0.001, optimizer="SGD"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="SGD",
    name="yolov8n_no_freeze",
)

"""- The model trained without layer freezing and using the SGD optimizer achieved excellent detection performance with a fitness score of 0.83. Precision and recall reached 0.99 and 0.97 respectively, while mAP@0.5 and mAP@0.5:0.95 were 0.99 and 0.81, indicating very high localization and classification accuracy. These results suggest that allowing the entire model to update (no freezing) and switching to SGD contributed positively to fine-tuning performance for the car detection task."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze/results.png"))

"""- The result plots show smooth and consistent decreases in all training and validation loss curves (box, classification, DFL), indicating stable and effective learning. Metrics such as precision, recall, and both mAP curves steadily rise and plateau at near-optimal levels. This suggests the model generalized well without signs of overfitting, confirming the effectiveness of this configuration in both training and validation phases."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- This test result shows a significant improvement in both accuracy and prediction quality. The model achieved an Exact Match Accuracy (EMA) of 25.50%, a notable increase compared to previous runs, indicating more exact car count predictions. Furthermore, the Mean Squared Error (MSE) dropped to 16.17, highlighting a substantial reduction in prediction variance. These results confirm that training without freezing and using the SGD optimizer led to enhanced generalization and more reliable counting performance on the test set."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

import cv2
import numpy as np

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 2- batchsize=32, lr=0.001, optimizer="Adam"
"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_no_freeze_0",
)

"""- The training run using the YOLOv8n model without layer freezing and with the Adam optimizer yielded strong results. The model achieved a high fitness score of 0.85, supported by excellent detection metrics: precision at 0.99, recall at 0.99, mAP50 at 0.99, and mAP50-95 at 0.83. These indicate highly reliable object detection performance, especially for the car class."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_0/results.png"))

"""- The training and validation loss curves show steady and consistent convergence across all loss types (box, class, and distribution focal loss), with minimal noise or overfitting signs. Meanwhile, the precision, recall, and mAP metrics increase smoothly and plateau at very high values, confirming that the model generalizes well and effectively distinguishes cars in complex scenarios. This run represents one of the best-performing configurations so far."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_0/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_0/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_0/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_0/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_0/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The latest test results show a significant improvement in count prediction performance. The model achieved an Exact Match Accuracy (EMA) of 46.00% and a notably low Mean Squared Error (MSE) of 3.725, indicating high precision and reliability in object counting. Most predicted counts are within a very small margin of the ground truth, suggesting that the model has learned to generalize well across varying scene complexities. This reflects the most accurate and robust performance among previous runs."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_0/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 3- batchsize=64, lr=0.001, optimizer="Adam"
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=64,
    lr0=0.001,
    optimizer="Adam",
    name="yolov8n_no_freeze_1",
)

"""- The model trained with a batch size of 64 and the Adam optimizer has achieved strong performance metrics, with a precision of 0.99, recall of 0.99, mAP@0.5 of 0.99, and mAP@0.5:0.95 of 0.83. The fitness score of 0.85 reflects a very competitive balance across all detection metrics, indicating the model is both highly accurate and generalizes well. This configuration matches the best result so far and suggests excellent learning stability."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_1/results.png"))

"""- The loss curves (box, cls, dfl) show steady and smooth convergence in both training and validation, indicating consistent learning without overfitting. Precision and recall quickly reach near-perfect values and plateau, while mAP metrics increase smoothly and stabilize at high levels. The consistent upward trend and flattening of metrics suggest that the model has effectively captured the object detection task and is performing robustly on validation data."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_1/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_1/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_1/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_1/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_1/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model achieved an Exact Match Accuracy (EMA) of 37.00% and a Mean Squared Error (MSE) of 5.995, indicating a solid improvement in predicting exact vehicle counts over previous experiments. The relatively low MSE reflects consistent count predictions close to the true values. This balance between high precision and reduced error demonstrates that the model generalizes well across diverse images in the test set, suggesting effective learning from training data."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_1/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 4- batchsize=32, lr=0.01, optimizer="Adam"

"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Train
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.01,
    optimizer="Adam",
    name="yolov8n_no_freeze_2",
)

"""- The model trained with a learning rate of 0.01 and no layer freezing achieved outstanding results, with a fitness score of 0.86, indicating strong overall performance. The mAP@0.5 reached 0.99 and mAP@0.5:0.95 was 0.84, suggesting both high detection precision and robust localization across IoU thresholds. The precision (0.99) and recall (0.98) metrics reflect excellent object classification and detection coverage for the 'car' class."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_2/results.png"))

"""- The loss curves (box, cls, and dfl) show a smooth and consistent downward trend for both training and validation, implying effective learning without overfitting. The precision and recall metrics plateau at near-perfect values, while the mAP metrics steadily increase throughout training, confirming reliable convergence. Overall, this training configuration yielded highly accurate and stable model behavior."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_2/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_2/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_2/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_2/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_2/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model achieved a 45.5% Exact Match Accuracy (EMA) and a Mean Squared Error (MSE) of 3.325, indicating a strong and consistent performance in predicting car counts across diverse images. The high EMA suggests that nearly half of the test images had their counts predicted exactly right, while the low MSE confirms that even when the count was off, the prediction was usually close to the true value. This result reflects an effective balance between detection accuracy and generalization."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_2/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 5- batchsize=32, lr=0.005, optimizer="Adam"

"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.005,
    optimizer="Adam",
    name="yolov8n_no_freeze_3",
)

"""- The model trained with a learning rate of 0.005 and Adam optimizer achieved an excellent overall performance, with a fitness score of 0.86, mAP@50-95 of 0.85, and nearly perfect mAP@50 of 0.99. High precision (0.99) and recall (0.99) indicate that the model is both accurate and sensitive in detecting cars, suggesting strong generalization and minimal overfitting."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_3/results.png"))

"""- The training and validation loss curves in the result plot show smooth and consistent decreases across all three loss components (box, cls, dfl), indicating stable convergence. The precision and recall metrics plateau near 1.0, and both mAP metrics increase steadily, confirming high-quality detection performance. These curves support the metrics: the model trained efficiently and reached a well-optimized state."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_3/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_3/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_3/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_3/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_3/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""The model achieved a 46.00% Exact Match Accuracy and a Mean Squared Error (MSE) of 2.975, marking the best test performance among the evaluated runs so far. This indicates improved consistency in predicted car counts relative to ground truth, with many predictions differing by just one or two instances. The lower MSE reflects stronger overall accuracy in numerical predictions, and the stable EMA suggests the model generalizes well on unseen images. This run demonstrates a strong balance between precision and robustness."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_3/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""## Yolo models with different hyperparameters specific to the YOLO architecture

- To further optimize detection results, we experimented with two YOLO-specific hyperparameters — confidence threshold (conf) and IoU threshold (iou). These control the filtering and suppression of predicted boxes. We tested their effects using our best model (yolov8n_no_freeze_3) to evaluate improvements in accuracy and error metrics.

### 1- with conf = 0.4
"""

# Load the model (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.005,
    optimizer="Adam",
    conf=0.4,  # Higher confidence threshold
    name="yolov8n_no_freeze_conf04",
)

"""- The model trained with conf4 exhibits strong performance metrics: Precision of 0.99, Recall of 0.99, and mAP50-95 of 0.85. The fitness score of 0.87 reflects a well-balanced optimization across key metrics. These values indicate that the model has learned to localize and classify car objects with high confidence and consistency, making it one of the most accurate configurations among the tested setups."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_conf04/results.png"))

"""- The loss plots show steady convergence throughout training. The training and validation losses decrease smoothly without signs of overfitting. Additionally, the mAP metrics and recall curves rise quickly and plateau at high values, indicating early and consistent learning. This visual confirmation supports the numerical results and further validates the quality of the trained model."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_conf04/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_conf04/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_conf04/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_conf04/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_conf04/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The evaluation over the test set confirms the model's generalization capability. With an Exact Match Accuracy (EMA) of 46.00% and a relatively low Mean Squared Error (MSE) of 2.9750, the model demonstrates excellent count estimation across various image scenes. Most predictions are within 1–3 cars of the ground truth, and exact matches occur frequently, reflecting both precision in localization and stability in total object count prediction."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_conf04/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""### 2- with iou = 0.5

"""

# Modeli yükle (pretrained yolov8n)
model = YOLO("yolov8n.pt")

# Eğitim
model.train(
    data="car_count_config.yaml",
    epochs=50,
    imgsz=640,
    batch=32,
    lr0=0.005,
    optimizer="Adam",
    iou=0.5,  # Lowered IoU threshold for more aggressive NMS
    name="yolov8n_no_freeze_iou05",
)

"""- The model trained with iou=0.5 shows excellent performance across all key evaluation metrics. It achieved a Precision of 0.99, Recall of 0.99, mAP50 of 0.99, and a strong mAP50-95 of 0.849. The fitness score of 0.86 indicates a well-balanced performance, slightly behind the best-performing models. These metrics suggest the model is both highly accurate and consistent in detecting car objects under this configuration."""

from IPython.display import Image, display
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_iou05/results.png"))

"""- The training curves indicate steady and smooth convergence of losses (box, classification, and distribution focal loss) over the epochs. Validation curves closely follow training trends, with no signs of overfitting. Precision, recall, and mAP curves plateau near their maximum values early in training, demonstrating efficient learning and model stability."""

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_iou05/val_batch0_pred.jpg"))
display(Image(filename="/content/runs/detect/yolov8n_no_freeze_iou05/val_batch1_pred.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_iou05/val_batch0_labels.jpg"))

display(Image(filename="/content/runs/detect/yolov8n_no_freeze_iou05/confusion_matrix.png"))

"""#### test results"""

# Best model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_iou05/weights/best.pt")

test_image_dir = "/content/cars_dataset/images/test"
test_label_dir = "/content/cars_dataset/labels/test"

pred_counts, true_counts = evaluate_model_on_test(model, test_image_dir, test_label_dir)

ema = exact_match_accuracy(pred_counts, true_counts)
mse = mean_squared_error(pred_counts, true_counts)

print(f"✅ Test Set Evaluation:")
print(f"Exact Match Accuracy (EMA): {ema:.2f}%")
print(f"Mean Squared Error (MSE): {mse:.4f}")

"""- The model achieved an Exact Match Accuracy (EMA) of 46.00% and a Mean Squared Error (MSE) of 2.9750, confirming its effectiveness in object count estimation. Most predictions are within 1–2 objects of the ground truth, and exact matches are frequent. This places the model among the top-performing configurations in terms of both detection accuracy and count estimation."""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the model
model = YOLO("/content/runs/detect/yolov8n_no_freeze_iou05/weights/best.pt")

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
results = model(image_path, verbose=False)
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Bounding box drawing
for box in results[0].boxes.xyxy.cpu().numpy():
    x1, y1, x2, y2 = map(int, box[:4])
    cv2.rectangle(img, (x1, y1), (x2, y2), color=(255, 0, 0), thickness=2)

plt.figure(figsize=(12, 8))
plt.imshow(img)
plt.axis('off')
plt.title("Prediction Bounding Boxes (no labels)")
plt.show()

image_path = "/content/cars_dataset/images/test/20161225_TPZ_00335.png"
label_path = "/content/cars_dataset/labels/test/20161225_TPZ_00335.txt"

# Draw the tagged image
labeled_img = draw_yolo_labels(image_path, label_path)

plt.figure(figsize=(12, 8))
plt.imshow(labeled_img)
plt.axis('off')
plt.title("Ground Truth Bounding Boxes")
plt.show()

"""## Results, Conclusion and Comments

**- Comparison and Analysis of Best Performing Models -**

Based on all training experiments, the models were comprehensively evaluated using Exact Match Accuracy (EMA), Mean Squared Error (MSE), Precision, and Recall metrics. The top four performing models were predominantly those trained with no freezing (no_freeze), indicating that allowing the entire model to fine-tune its weights led to better adaptation and improved performance.

In particular, the yolov8n_no_freeze_3(learning rate = 0.005, batch size = 32, optimizer = "Adam") model achieved the most balanced and effective results with an EMA of 46.0%, a very low MSE of 2.9750, and a high Recall of 98.80%. Similarly, the yolov8n_no_freeze_2(learning rate = 0.01, batch size = 32, optimizer = "Adam") model stood out with an EMA of 45.5% and a low MSE of 3.3250, indicating strong accuracy and consistency.

Additionally, yolov8n_no_freeze_0(learning rate = 0.001, batch size = 32, optimizer = "Adam") and yolov8n_freeze_10_2(learning rate = 0.01, batchsize = 32, optimizer="Adam") both delivered strong performance with EMAs of 46.0% and 48.5% respectively. While freeze_10_2 had a slightly higher MSE, it maintained strong Precision (99.32%) and Recall (98.17%), making it a competitive alternative. These findings clearly show that models trained with minimal or no freezing, combined with well-chosen hyperparameters, generally outperform those with extensive freezing.

In contrast, models trained with freeze=21 (i.e., freezing many layers of the backbone) generally performed poorly. These models showed lower EMA scores (~38.50%) and higher MSE values (>4.5), indicating weaker generalization and lower overall accuracy. This suggests that excessive freezing limits the model’s capacity to adapt to the dataset, leading to underfitting.

In summary, models with fewer frozen layers and optimized learning rates and batch sizes performed best on the car counting task using YOLOv8. For future improvements, further optimization, data augmentation, and exploring different backbone architectures could be considered.

**- Effect of YOLO-specific Hyperparameter Adjustments -**

All three models — yolov8n_no_freeze_3, yolov8n_no_freeze_conf04, and yolov8n_no_freeze_iou05 — exhibit nearly identical Exact Match Accuracy (EMA) of 46.00% and Mean Squared Error (MSE) of 2.9750, indicating highly consistent counting performance across the board. Among them, yolov8n_no_freeze_3 stands out with a slightly better balance in Recall (98.80%) and a competitive mAP50 (99.43%), making it a strong all-around performer.

On the other hand, yolov8n_no_freeze_conf04 achieved the highest mAP50-95 (0.8518) and overall fitness score (0.8658), showing its strength in precise localization performance. Meanwhile, yolov8n_no_freeze_iou05 yielded the highest Recall (98.83%) and matched no_freeze_3 with the best mAP50, making it slightly better in detecting all true objects.

In conclusion, while all three models are very effective, conf04 is ideal when overall localization accuracy is prioritized, whereas no_freeze_3 and iou05 offer a more balanced or recall-focused detection performance.

**- Alternative Methods for Object Counting -**

Apart from object detection-based methods like YOLO, alternative approaches have also been widely used for object counting tasks:

- Density Map Estimation:
These methods predict a density map instead of explicit object locations. The final count is obtained by integrating over the density map. Popular architectures include MCNN and CSRNet, which are especially effective in crowd counting and scenarios with heavy object occlusion.

- Regression-Based Models:
In these approaches, the model directly learns to regress the total count of objects from the image. While simpler and less computationally intensive, they lack spatial information and are less interpretable compared to detection-based methods.

- Segmentation-Based Counting:
Semantic or instance segmentation models can identify object regions, and the count is extracted by counting connected components or instances. This is useful when both localization and area estimation are needed.

These methods can outperform detection-based techniques in cases with overlapping objects or very dense scenes, where bounding box annotation is challenging or ambiguous.

**-CONCLUSION-**

In this project, we tackled the object counting task in drone-based parking lot images using YOLOv8 models. Through extensive experimentation with different training configurations, including freezing strategies, optimizer choices, learning rates, and YOLO-specific parameters, we evaluated the models using multiple performance metrics such as Exact Match Accuracy (EMA), Mean Squared Error (MSE), Precision, and Recall.

The results revealed that models trained without freezing performed significantly better across all metrics, confirming that allowing full fine-tuning enables the model to better adapt to the dataset. Among all models, yolov8n_no_freeze_3 delivered the most balanced and robust performance, achieving a high EMA, very low MSE, and excellent recall. Other top models like yolov8n_no_freeze_2, no_freeze_0, and freeze_10_2 also exhibited competitive results, showing the importance of choosing optimal hyperparameters.

Moreover, experiments with YOLO-specific parameters (confidence and IoU thresholds) demonstrated that even after reaching a strong baseline, further gains in localization and sensitivity are achievable through careful tuning.

Overall, the project highlights the effectiveness of lightweight YOLO models for object counting tasks and emphasizes the critical role of comprehensive experimentation in achieving optimal model performance. Future work could explore advanced data augmentation techniques, alternative model backbones, or ensembling approaches to further improve accuracy.
"""